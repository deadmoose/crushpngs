#!/usr/bin/env python

import os, subprocess, time, threading
from optparse import OptionParser
from Queue import Queue

def crushPng (pngcrush, opts, file):
    crushedFile = "%s.crushed" % file
    process = subprocess.Popen([pngcrush, opts, file, crushedFile],
        stdout=open('/dev/null'), stderr=subprocess.PIPE)
    if not process.wait() == 0:
        stdout, stderr = process.communicate()
        print "Error running pngcrush: %s" % stderr
        os.remove(crushedFile)
        exit(-1)

    oldStat = os.stat(file)
    newStat = os.stat(crushedFile)
    if newStat.st_size < oldStat.st_size:
        os.rename(crushedFile, file)
        return oldStat.st_size - newStat.st_size
    else:
        os.remove(crushedFile)
        return 0

if __name__ == "__main__":
    parser = OptionParser(usage='''crushpngs [options] [path]

Runs pngcrush against all pngs found under a path and collects some information
about the savings.

''')
    parser.add_option("--pngcrush", dest="path", default="pngcrush",
        help="Path to the pngcrush executable")
    parser.add_option("--pngcrush-opts", dest="opts", default="-q -brute -reduce",
        help="Options to pass to pngcrush")
    parser.add_option("-s", "--since", dest="date", default="1970-01-01",
        help="Only crush files modified after the specified date")
    parser.add_option("-t", "--threads", dest="threads", type="int", default=4,
        help="Number of crushing threads to run simultaneously")


    (options, args) = parser.parse_args()

    if len(args) == 0:
        args.append(os.getcwd())
    earliest = time.mktime(time.strptime(options.date, '%Y-%m-%d'))

    pngs = Queue()
    # Keep some stats
    filesChanged = 0
    bytesSaved = 0
    def worker():
        global filesChanged, bytesSaved
        while True:
            path = pngs.get()
            saved = crushPng(options.path, options.opts, path)
            if saved:
                filesChanged += 1
                bytesSaved += saved
            pngs.task_done()

    tooOld = set()

    for arg in args:
        for root, dirs, files in os.walk(arg):
            for name in files:
                if not name.endswith('.png'):
                    continue
                path = os.path.join(root, name)
                if os.path.getmtime(path) > earliest:
                    pngs.put(path)
                else:
                    tooOld.add(path)

    if not pngs:
        print "No files to crush"
        exit(0)

    if tooOld:
        print "Old files ignored: %s" % len(tooOld)
    print "Files to process: %s" % pngs.qsize()
    for i in range(options.threads):
        t = threading.Thread(target=worker)
        t.setDaemon(True)
        t.start()

    pngs.join()

    # And print some summary info
    print "Files changed: %d" % filesChanged
    print "Bytes saved: %d" % bytesSaved
